#***************************************************************
# Author: Selyunin 
# Date : 21 January 2016
# Licence: BSDv2
# Device: Zybo
#***************************************************************
# This is the modified version of script generated by vivado
#***************************************************************

################################################################
# Check if script is running in correct Vivado version.
################################################################
set scripts_vivado_version 2015.2
set current_vivado_version [version -short]

if { [string first $scripts_vivado_version $current_vivado_version] == -1 } {
   puts ""
   puts "ERROR: This script was generated using Vivado <$scripts_vivado_version> and is being run in <$current_vivado_version> of Vivado. Please run the script in Vivado <$scripts_vivado_version> then open the design in Vivado <$current_vivado_version>. Upgrade the design by running \"Tools => Report => Report IP Status...\", then run write_bd_tcl to create an updated script."

   return 1
}

################################################################
# START
################################################################

# To test this script, run the following commands from Vivado Tcl console:
# source ip_debug_bd_script.tcl

# If you do not already have a project created,
# you can create a project using the following command:
#    create_project project_1 myproj -part xc7z010clg400-1
#    set_property BOARD_PART digilentinc.com:zybo:part0:1.0 [current_project]

# CHECKING IF PROJECT EXISTS
if { [get_projects -quiet] eq "" } {
   puts "ERROR: Please open or create a project!"
   return 1
}


# CHANGE DESIGN NAME HERE
set design_name ip_debug_bd

create_bd_design $design_name
current_bd_design $design_name


##################################################################
# DESIGN PROCs
##################################################################



# Procedure to create entire design; Provide argument to make
# procedure reusable. If parentCell is "", will use root.
proc create_root_design { parentCell } {

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     puts "ERROR: Unable to find parent cell <$parentCell>!"
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     puts "ERROR: Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports
  set clk_div [ create_bd_port -dir O clk_div ]
  set clk_i [ create_bd_port -dir I clk_i ]
  set gen_o [ create_bd_port -dir O -from 0 -to 0 gen_o ]
  set rst_i [ create_bd_port -dir I rst_i ]
  set spike_V [ create_bd_port -dir O -from 0 -to 0 -type data spike_V ]

  # Create instance: bounded_once_0, and set properties
  set bounded_once_0 [ create_bd_cell -type ip -vlnv xilinx.com:hls:bounded_once:1.0 bounded_once_0 ]

  # Create instance: input_gen_1, and set properties
  set input_gen_1 [ create_bd_cell -type ip -vlnv harmonia:debug:input_gen:1.2 input_gen_1 ]

  # Create instance: uClkDiv_0, and set properties
  set uClkDiv_0 [ create_bd_cell -type ip -vlnv infineon.com:user:uClkDiv:1.0 uClkDiv_0 ]

  # Create instance: util_vector_logic_0, and set properties
  set util_vector_logic_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic:2.0 util_vector_logic_0 ]
  set_property -dict [ list CONFIG.C_OPERATION {not} CONFIG.C_SIZE {1}  ] $util_vector_logic_0

  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]
  set_property -dict [ list CONFIG.CONST_VAL {10} CONFIG.CONST_WIDTH {24}  ] $xlconstant_0

  # Create port connections
  connect_bd_net -net bounded_once_0_spike_V [get_bd_ports spike_V] [get_bd_pins bounded_once_0/spike_V]
  set_property -dict [ list HDL_ATTRIBUTE.MARK_DEBUG {true}  ] [get_bd_nets bounded_once_0_spike_V]
  connect_bd_net -net clk_i_1 [get_bd_ports clk_i] [get_bd_pins uClkDiv_0/clk_i]
  connect_bd_net -net clk_wiz_out1 [get_bd_ports clk_div] [get_bd_pins bounded_once_0/ap_clk] [get_bd_pins input_gen_1/clk_i] [get_bd_pins uClkDiv_0/clk_o]
  set_property -dict [ list HDL_ATTRIBUTE.MARK_DEBUG {true}  ] [get_bd_nets clk_wiz_out1]
  connect_bd_net -net input_gen_0_gen_o [get_bd_ports gen_o] [get_bd_pins bounded_once_0/indata_0_V] [get_bd_pins input_gen_1/gen_o]
  set_property -dict [ list HDL_ATTRIBUTE.MARK_DEBUG {true}  ] [get_bd_nets input_gen_0_gen_o]
  connect_bd_net -net rst_i_1 [get_bd_ports rst_i] [get_bd_pins bounded_once_0/ap_start] [get_bd_pins input_gen_1/rst_i] [get_bd_pins util_vector_logic_0/Op1]
  connect_bd_net -net util_vector_logic_0_Res [get_bd_pins bounded_once_0/ap_rst] [get_bd_pins util_vector_logic_0/Res]
  set_property -dict [ list HDL_ATTRIBUTE.MARK_DEBUG {true}  ] [get_bd_nets util_vector_logic_0_Res]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins uClkDiv_0/div_val_i] [get_bd_pins xlconstant_0/dout]

  # Create address segments
  

  # Restore current instance
  current_bd_instance $oldCurInst

  save_bd_design
}
# End of create_root_design()


##################################################################
# MAIN FLOW
##################################################################

create_root_design ""

# Added by selyunin
##################################################################
# GENERATE OUTPUT PRODUCTS
##################################################################
generate_target all [get_files [get_files ${design_name}.bd]]

##################################################################
# CREATE A DESIGN WRAPPER
##################################################################
set design_wrapper [make_wrapper -files [get_files [get_files ${design_name}.bd] ] -top ]
add_files -norecurse $design_wrapper
